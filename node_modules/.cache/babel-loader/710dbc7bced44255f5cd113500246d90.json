{"ast":null,"code":"import Blowfish from 'egoroof-blowfish';\nimport { BLOWFISH_IV, BLOWFISH_KEY } from '../constants/settings'; // https://github.com/egoroof/blowfish/blob/master/README.md\n\nconst bf = new Blowfish(BLOWFISH_KEY, Blowfish.MODE.ECB, Blowfish.PADDING.NULL);\nbf.setIv(BLOWFISH_IV);\nexport const encrypt = data => btoa(bf.encode(data).reduce((data, byte) => data + String.fromCharCode(byte), ''));\nexport const decrypt = encoded => {\n  try {\n    return bf.decode(Uint8Array.from(atob(encoded), c => c.charCodeAt(0)), Blowfish.TYPE.STRING);\n  } catch (error) {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/anthonydelorie/Git/react-wordle/src/lib/encryption.ts"],"names":["Blowfish","BLOWFISH_IV","BLOWFISH_KEY","bf","MODE","ECB","PADDING","NULL","setIv","encrypt","data","btoa","encode","reduce","byte","String","fromCharCode","decrypt","encoded","decode","Uint8Array","from","atob","c","charCodeAt","TYPE","STRING","error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,uBAA1C,C,CAEA;;AACA,MAAMC,EAAE,GAAG,IAAIH,QAAJ,CAAaE,YAAb,EAA2BF,QAAQ,CAACI,IAAT,CAAcC,GAAzC,EAA8CL,QAAQ,CAACM,OAAT,CAAiBC,IAA/D,CAAX;AACAJ,EAAE,CAACK,KAAH,CAASP,WAAT;AAEA,OAAO,MAAMQ,OAAO,GAAIC,IAAD,IACrBC,IAAI,CACFR,EAAE,CAACS,MAAH,CAAUF,IAAV,EAAgBG,MAAhB,CAAuB,CAACH,IAAD,EAAOI,IAAP,KAAgBJ,IAAI,GAAGK,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAA9C,EAAyE,EAAzE,CADE,CADC;AAKP,OAAO,MAAMG,OAAO,GAAIC,OAAD,IAAqB;AAC1C,MAAI;AACF,WAAOf,EAAE,CAACgB,MAAH,CACLC,UAAU,CAACC,IAAX,CAAgBC,IAAI,CAACJ,OAAD,CAApB,EAAgCK,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAtC,CADK,EAELxB,QAAQ,CAACyB,IAAT,CAAcC,MAFT,CAAP;AAID,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CATM","sourcesContent":["import Blowfish from 'egoroof-blowfish'\n\nimport { BLOWFISH_IV, BLOWFISH_KEY } from '../constants/settings'\n\n// https://github.com/egoroof/blowfish/blob/master/README.md\nconst bf = new Blowfish(BLOWFISH_KEY, Blowfish.MODE.ECB, Blowfish.PADDING.NULL)\nbf.setIv(BLOWFISH_IV)\n\nexport const encrypt = (data: string) =>\n  btoa(\n    bf.encode(data).reduce((data, byte) => data + String.fromCharCode(byte), '')\n  )\n\nexport const decrypt = (encoded: string) => {\n  try {\n    return bf.decode(\n      Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0)),\n      Blowfish.TYPE.STRING\n    )\n  } catch (error) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}