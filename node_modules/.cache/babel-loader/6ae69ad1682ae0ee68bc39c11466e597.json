{"ast":null,"code":"var _jsxFileName = \"/Users/anthonydelorie/Git/react-wordle/src/components/grid/CompletedRow.tsx\";\nimport { getGuessStatuses } from '../../lib/statuses';\nimport { unicodeSplit } from '../../lib/words';\nimport { Cell } from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CompletedRow = _ref => {\n  let {\n    solution,\n    guess,\n    isRevealing\n  } = _ref;\n  const statuses = getGuessStatuses(solution, guess);\n  const splitGuess = unicodeSplit(guess);\n  console.log(solution, splitGuess);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-1 flex justify-center\",\n    children: splitGuess.map((letter, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      value: letter,\n      status: i !== 0 ? statuses[i] : 'correct',\n      position: i,\n      isRevealing: i === 0 || isRevealing,\n      isCompleted: true\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = CompletedRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompletedRow\");","map":{"version":3,"sources":["/Users/anthonydelorie/Git/react-wordle/src/components/grid/CompletedRow.tsx"],"names":["getGuessStatuses","unicodeSplit","Cell","CompletedRow","solution","guess","isRevealing","statuses","splitGuess","console","log","map","letter","i"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,IAAT,QAAqB,QAArB;;AAQA,OAAO,MAAMC,YAAY,GAAG,QAA6C;AAAA,MAA5C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAA4C;AACvE,QAAMC,QAAQ,GAAGP,gBAAgB,CAACI,QAAD,EAAWC,KAAX,CAAjC;AACA,QAAMG,UAAU,GAAGP,YAAY,CAACI,KAAD,CAA/B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBI,UAAtB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,cACGA,UAAU,CAACG,GAAX,CAAe,CAACC,MAAD,EAASC,CAAT,kBACd,QAAC,IAAD;AAEE,MAAA,KAAK,EAAED,MAFT;AAGE,MAAA,MAAM,EAAEC,CAAC,KAAK,CAAN,GAAUN,QAAQ,CAACM,CAAD,CAAlB,GAAwB,SAHlC;AAIE,MAAA,QAAQ,EAAEA,CAJZ;AAKE,MAAA,WAAW,EAAEA,CAAC,KAAK,CAAN,IAAWP,WAL1B;AAME,MAAA,WAAW;AANb,OACOO,CADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CApBM;KAAMV,Y","sourcesContent":["import { getGuessStatuses } from '../../lib/statuses'\nimport { unicodeSplit } from '../../lib/words'\nimport { Cell } from './Cell'\n\ntype Props = {\n  solution: string\n  guess: string\n  isRevealing?: boolean\n}\n\nexport const CompletedRow = ({ solution, guess, isRevealing }: Props) => {\n  const statuses = getGuessStatuses(solution, guess)\n  const splitGuess = unicodeSplit(guess)\n\n  console.log(solution, splitGuess)\n\n  return (\n    <div className=\"mb-1 flex justify-center\">\n      {splitGuess.map((letter, i) => (\n        <Cell\n          key={i}\n          value={letter}\n          status={i !== 0 ? statuses[i] : 'correct'}\n          position={i}\n          isRevealing={i === 0 || isRevealing}\n          isCompleted\n        />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}