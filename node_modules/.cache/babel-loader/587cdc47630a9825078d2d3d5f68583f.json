{"ast":null,"code":"import _toConsumableArray from \"/Users/anthonydelorie/Git/react-lingo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/anthonydelorie/Git/react-lingo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anthonydelorie/Git/react-lingo/src/App.tsx\";\nimport './App.css';\nimport { ClockIcon } from '@heroicons/react/outline';\nimport { format } from 'date-fns';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nimport { useEffect, useState } from 'react';\nimport Div100vh from 'react-div-100vh';\nimport { AlertContainer } from './components/alerts/AlertContainer';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { DatePickerModal } from './components/modals/DatePickerModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { MigrateStatsModal } from './components/modals/MigrateStatsModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { Navbar } from './components/navbar/Navbar';\nimport { DATE_LOCALE, DISCOURAGE_INAPP_BROWSERS, LONG_ALERT_TIME_MS, MAX_CHALLENGES, REVEAL_TIME_MS, WELCOME_INFO_MODAL_MS } from './constants/settings';\nimport { CORRECT_WORD_MESSAGE, DISCOURAGE_INAPP_BROWSER_TEXT, GAME_COPIED_MESSAGE, HARD_MODE_ALERT_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, SHARE_FAILURE_TEXT, WIN_MESSAGES, WORD_NOT_FOUND_MESSAGE } from './constants/strings';\nimport { useAlert } from './context/AlertContext';\nimport { isInAppBrowser } from './lib/browser';\nimport { getStoredIsHighContrastMode, loadGameStateFromLocalStorage, saveGameStateToLocalStorage, setStoredIsHighContrastMode } from './lib/localStorage';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { findFirstUnusedReveal, getGameDate, getIsLatestGame, isWinningWord, isWordInWordList, setGameDate, solution, solutionGameDate, unicodeLength } from './lib/words';\n\nfunction App() {\n  var isLatestGame = getIsLatestGame();\n  var gameDate = getGameDate();\n  var prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  var _useAlert = useAlert(),\n      showErrorAlert = _useAlert.showError,\n      showSuccessAlert = _useAlert.showSuccess;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isGameWon = _useState4[0],\n      setIsGameWon = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isInfoModalOpen = _useState6[0],\n      setIsInfoModalOpen = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isStatsModalOpen = _useState8[0],\n      setIsStatsModalOpen = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isDatePickerModalOpen = _useState10[0],\n      setIsDatePickerModalOpen = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isMigrateStatsModalOpen = _useState12[0],\n      setIsMigrateStatsModalOpen = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isSettingsModalOpen = _useState14[0],\n      setIsSettingsModalOpen = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      currentRowClass = _useState16[0],\n      setCurrentRowClass = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isGameLost = _useState18[0],\n      setIsGameLost = _useState18[1];\n\n  var _useState19 = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isDarkMode = _useState20[0],\n      setIsDarkMode = _useState20[1];\n\n  var _useState21 = useState(getStoredIsHighContrastMode()),\n      _useState22 = _slicedToArray(_useState21, 2),\n      isHighContrastMode = _useState22[0],\n      setIsHighContrastMode = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      isRevealing = _useState24[0],\n      setIsRevealing = _useState24[1];\n\n  var _useState25 = useState(function () {\n    var loaded = loadGameStateFromLocalStorage(isLatestGame);\n\n    if (loaded?.solution !== solution) {\n      return [];\n    }\n\n    console.log(solution);\n    var gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true);\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true\n      });\n    }\n\n    return loaded.guesses;\n  }),\n      _useState26 = _slicedToArray(_useState25, 2),\n      guesses = _useState26[0],\n      setGuesses = _useState26[1];\n\n  var _useState27 = useState(function () {\n    return loadStats();\n  }),\n      _useState28 = _slicedToArray(_useState27, 2),\n      stats = _useState28[0],\n      setStats = _useState28[1];\n\n  var _useState29 = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      isHardMode = _useState30[0],\n      setIsHardMode = _useState30[1];\n\n  useEffect(function () {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(function () {\n        setIsInfoModalOpen(true);\n      }, WELCOME_INFO_MODAL_MS);\n    }\n  });\n  useEffect(function () {\n    DISCOURAGE_INAPP_BROWSERS && isInAppBrowser() && showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n      persist: false,\n      durationMs: 7000\n    });\n  }, [showErrorAlert]);\n  useEffect(function () {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  var handleDarkMode = function handleDarkMode(isDark) {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  var handleHardMode = function handleHardMode(isHard) {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE);\n    }\n  };\n\n  var handleHighContrastMode = function handleHighContrastMode(isHighContrast) {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  var clearCurrentRowClass = function clearCurrentRowClass() {\n    setCurrentRowClass('');\n  };\n\n  useEffect(function () {\n    saveGameStateToLocalStorage(getIsLatestGame(), {\n      guesses: guesses,\n      solution: solution\n    });\n  }, [guesses]);\n  useEffect(function () {\n    if (isGameWon) {\n      var winMessage = WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)];\n      var delayMs = REVEAL_TIME_MS * solution.length;\n      showSuccessAlert(winMessage, {\n        delayMs: delayMs,\n        onClose: function onClose() {\n          return setIsStatsModalOpen(true);\n        }\n      });\n    }\n\n    if (isGameLost) {\n      setTimeout(function () {\n        setIsStatsModalOpen(true);\n      }, (solution.length + 1) * REVEAL_TIME_MS);\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert]);\n\n  var onChar = function onChar(value) {\n    if (unicodeLength(\"\".concat(currentGuess).concat(value)) <= solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(\"\".concat(currentGuess).concat(value));\n    }\n  };\n\n  var onDelete = function onDelete() {\n    setCurrentGuess(new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join(''));\n  };\n\n  var onEnter = function onEnter() {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      console.log(currentGuess);\n      setCurrentRowClass('jiggle');\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass\n      });\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      var firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle');\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass\n        });\n      }\n    }\n\n    setIsRevealing(true); // turn this back off after all\n    // chars have been revealed\n\n    setTimeout(function () {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * solution.length);\n    var winningWord = isWinningWord(currentGuess);\n\n    if (unicodeLength(currentGuess) === solution.length && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setGuesses([].concat(_toConsumableArray(guesses), [currentGuess]));\n      console.log(setGuesses);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length));\n        }\n\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        }\n\n        setIsGameLost(true);\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Div100vh, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex h-full flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    setIsInfoModalOpen: setIsInfoModalOpen,\n    setIsStatsModalOpen: setIsStatsModalOpen,\n    setIsDatePickerModalOpen: setIsDatePickerModalOpen,\n    setIsSettingsModalOpen: setIsSettingsModalOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }), !isLatestGame && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ClockIcon, {\n    className: \"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-base text-gray-600 dark:text-gray-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }, format(gameDate, 'd MMMM yyyy', {\n    locale: DATE_LOCALE\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex grow flex-col justify-center pb-6 short:pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    solution: solution,\n    guesses: guesses,\n    currentGuess: currentGuess,\n    isRevealing: isRevealing,\n    currentRowClassName: currentRowClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Keyboard, {\n    onChar: onChar,\n    onDelete: onDelete,\n    onEnter: onEnter,\n    solution: solution,\n    guesses: guesses,\n    isRevealing: isRevealing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InfoModal, {\n    isOpen: isInfoModalOpen,\n    handleClose: function handleClose() {\n      return setIsInfoModalOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(StatsModal, {\n    isOpen: isStatsModalOpen,\n    handleClose: function handleClose() {\n      return setIsStatsModalOpen(false);\n    },\n    solution: solution,\n    guesses: guesses,\n    gameStats: stats,\n    isLatestGame: isLatestGame,\n    isGameLost: isGameLost,\n    isGameWon: isGameWon,\n    handleShareToClipboard: function handleShareToClipboard() {\n      return showSuccessAlert(GAME_COPIED_MESSAGE);\n    },\n    handleShareFailure: function handleShareFailure() {\n      return showErrorAlert(SHARE_FAILURE_TEXT, {\n        durationMs: LONG_ALERT_TIME_MS\n      });\n    },\n    handleMigrateStatsButton: function handleMigrateStatsButton() {\n      setIsStatsModalOpen(false);\n      setIsMigrateStatsModalOpen(true);\n    },\n    isHardMode: isHardMode,\n    isDarkMode: isDarkMode,\n    isHighContrastMode: isHighContrastMode,\n    numberOfGuessesMade: guesses.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DatePickerModal, {\n    isOpen: isDatePickerModalOpen,\n    initialDate: solutionGameDate,\n    handleSelectDate: function handleSelectDate(d) {\n      setIsDatePickerModalOpen(false);\n      setGameDate(d);\n    },\n    handleClose: function handleClose() {\n      return setIsDatePickerModalOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MigrateStatsModal, {\n    isOpen: isMigrateStatsModalOpen,\n    handleClose: function handleClose() {\n      return setIsMigrateStatsModalOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SettingsModal, {\n    isOpen: isSettingsModalOpen,\n    handleClose: function handleClose() {\n      return setIsSettingsModalOpen(false);\n    },\n    isHardMode: isHardMode,\n    handleHardMode: handleHardMode,\n    isDarkMode: isDarkMode,\n    handleDarkMode: handleDarkMode,\n    isHighContrastMode: isHighContrastMode,\n    handleHighContrastMode: handleHighContrastMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AlertContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anthonydelorie/Git/react-lingo/src/App.tsx"],"names":["ClockIcon","format","default","GraphemeSplitter","useEffect","useState","Div100vh","AlertContainer","Grid","Keyboard","DatePickerModal","InfoModal","MigrateStatsModal","SettingsModal","StatsModal","Navbar","DATE_LOCALE","DISCOURAGE_INAPP_BROWSERS","LONG_ALERT_TIME_MS","MAX_CHALLENGES","REVEAL_TIME_MS","WELCOME_INFO_MODAL_MS","CORRECT_WORD_MESSAGE","DISCOURAGE_INAPP_BROWSER_TEXT","GAME_COPIED_MESSAGE","HARD_MODE_ALERT_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","SHARE_FAILURE_TEXT","WIN_MESSAGES","WORD_NOT_FOUND_MESSAGE","useAlert","isInAppBrowser","getStoredIsHighContrastMode","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","addStatsForCompletedGame","loadStats","findFirstUnusedReveal","getGameDate","getIsLatestGame","isWinningWord","isWordInWordList","setGameDate","solution","solutionGameDate","unicodeLength","App","isLatestGame","gameDate","prefersDarkMode","window","matchMedia","matches","showErrorAlert","showError","showSuccessAlert","showSuccess","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isStatsModalOpen","setIsStatsModalOpen","isDatePickerModalOpen","setIsDatePickerModalOpen","isMigrateStatsModalOpen","setIsMigrateStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","localStorage","getItem","isDarkMode","setIsDarkMode","isHighContrastMode","setIsHighContrastMode","isRevealing","setIsRevealing","loaded","console","log","gameWasWon","guesses","includes","length","persist","setGuesses","stats","setStats","isHardMode","setIsHardMode","setTimeout","durationMs","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","handleHighContrastMode","isHighContrast","clearCurrentRowClass","winMessage","Math","floor","random","delayMs","onClose","onChar","value","onDelete","splitGraphemes","slice","join","onEnter","firstMissingReveal","winningWord","locale","d"],"mappings":"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","sourcesContent":["import './App.css'\n\nimport { ClockIcon } from '@heroicons/react/outline'\nimport { format } from 'date-fns'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\nimport { useEffect, useState } from 'react'\nimport Div100vh from 'react-div-100vh'\n\nimport { AlertContainer } from './components/alerts/AlertContainer'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { DatePickerModal } from './components/modals/DatePickerModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { MigrateStatsModal } from './components/modals/MigrateStatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { Navbar } from './components/navbar/Navbar'\nimport {\n  DATE_LOCALE,\n  DISCOURAGE_INAPP_BROWSERS,\n  LONG_ALERT_TIME_MS,\n  MAX_CHALLENGES,\n  REVEAL_TIME_MS,\n  WELCOME_INFO_MODAL_MS,\n} from './constants/settings'\nimport {\n  CORRECT_WORD_MESSAGE,\n  DISCOURAGE_INAPP_BROWSER_TEXT,\n  GAME_COPIED_MESSAGE,\n  HARD_MODE_ALERT_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  SHARE_FAILURE_TEXT,\n  WIN_MESSAGES,\n  WORD_NOT_FOUND_MESSAGE,\n} from './constants/strings'\nimport { useAlert } from './context/AlertContext'\nimport { isInAppBrowser } from './lib/browser'\nimport {\n  getStoredIsHighContrastMode,\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n} from './lib/localStorage'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  findFirstUnusedReveal,\n  getGameDate,\n  getIsLatestGame,\n  isWinningWord,\n  isWordInWordList,\n  setGameDate,\n  solution,\n  solutionGameDate,\n  unicodeLength,\n} from './lib/words'\n\nfunction App() {\n  const isLatestGame = getIsLatestGame()\n  const gameDate = getGameDate()\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const { showError: showErrorAlert, showSuccess: showSuccessAlert } =\n    useAlert()\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isDatePickerModalOpen, setIsDatePickerModalOpen] = useState(false)\n  const [isMigrateStatsModalOpen, setIsMigrateStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage(isLatestGame)\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    console.log(solution)\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n      showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n        persist: true,\n      })\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  useEffect(() => {\n    // if no game state on load,\n    // show the user the how-to info modal\n    if (!loadGameStateFromLocalStorage(true)) {\n      setTimeout(() => {\n        setIsInfoModalOpen(true)\n      }, WELCOME_INFO_MODAL_MS)\n    }\n  })\n\n  useEffect(() => {\n    DISCOURAGE_INAPP_BROWSERS &&\n      isInAppBrowser() &&\n      showErrorAlert(DISCOURAGE_INAPP_BROWSER_TEXT, {\n        persist: false,\n        durationMs: 7000,\n      })\n  }, [showErrorAlert])\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      showErrorAlert(HARD_MODE_ALERT_MESSAGE)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  const clearCurrentRowClass = () => {\n    setCurrentRowClass('')\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage(getIsLatestGame(), { guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const winMessage =\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      const delayMs = REVEAL_TIME_MS * solution.length\n\n      showSuccessAlert(winMessage, {\n        delayMs,\n        onClose: () => setIsStatsModalOpen(true),\n      })\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, (solution.length + 1) * REVEAL_TIME_MS)\n    }\n  }, [isGameWon, isGameLost, showSuccessAlert])\n\n  const onChar = (value: string) => {\n    if (\n      unicodeLength(`${currentGuess}${value}`) <= solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(\n      new GraphemeSplitter().splitGraphemes(currentGuess).slice(0, -1).join('')\n    )\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(unicodeLength(currentGuess) === solution.length)) {\n      setCurrentRowClass('jiggle')\n      return showErrorAlert(NOT_ENOUGH_LETTERS_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      console.log(currentGuess)\n      setCurrentRowClass('jiggle')\n\n      return showErrorAlert(WORD_NOT_FOUND_MESSAGE, {\n        onClose: clearCurrentRowClass,\n      })\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setCurrentRowClass('jiggle')\n        return showErrorAlert(firstMissingReveal, {\n          onClose: clearCurrentRowClass,\n        })\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * solution.length)\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (\n      unicodeLength(currentGuess) === solution.length &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      console.log(setGuesses)\n      setCurrentGuess('')\n\n      if (winningWord) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length))\n        }\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        if (isLatestGame) {\n          setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        }\n        setIsGameLost(true)\n        showErrorAlert(CORRECT_WORD_MESSAGE(solution), {\n          persist: true,\n          delayMs: REVEAL_TIME_MS * solution.length + 1,\n        })\n      }\n    }\n  }\n\n  return (\n    <Div100vh>\n      <div className=\"flex h-full flex-col\">\n        <Navbar\n          setIsInfoModalOpen={setIsInfoModalOpen}\n          setIsStatsModalOpen={setIsStatsModalOpen}\n          setIsDatePickerModalOpen={setIsDatePickerModalOpen}\n          setIsSettingsModalOpen={setIsSettingsModalOpen}\n        />\n\n        {!isLatestGame && (\n          <div className=\"flex items-center justify-center\">\n            <ClockIcon className=\"h-6 w-6 stroke-gray-600 dark:stroke-gray-300\" />\n            <p className=\"text-base text-gray-600 dark:text-gray-300\">\n              {format(gameDate, 'd MMMM yyyy', { locale: DATE_LOCALE })}\n            </p>\n          </div>\n        )}\n\n        <div className=\"mx-auto flex w-full grow flex-col px-1 pt-2 pb-8 sm:px-6 md:max-w-7xl lg:px-8 short:pb-2 short:pt-2\">\n          <div className=\"flex grow flex-col justify-center pb-6 short:pb-2\">\n            <Grid\n              solution={solution}\n              guesses={guesses}\n              currentGuess={currentGuess}\n              isRevealing={isRevealing}\n              currentRowClassName={currentRowClass}\n            />\n          </div>\n          <Keyboard\n            onChar={onChar}\n            onDelete={onDelete}\n            onEnter={onEnter}\n            solution={solution}\n            guesses={guesses}\n            isRevealing={isRevealing}\n          />\n          <InfoModal\n            isOpen={isInfoModalOpen}\n            handleClose={() => setIsInfoModalOpen(false)}\n          />\n          <StatsModal\n            isOpen={isStatsModalOpen}\n            handleClose={() => setIsStatsModalOpen(false)}\n            solution={solution}\n            guesses={guesses}\n            gameStats={stats}\n            isLatestGame={isLatestGame}\n            isGameLost={isGameLost}\n            isGameWon={isGameWon}\n            handleShareToClipboard={() => showSuccessAlert(GAME_COPIED_MESSAGE)}\n            handleShareFailure={() =>\n              showErrorAlert(SHARE_FAILURE_TEXT, {\n                durationMs: LONG_ALERT_TIME_MS,\n              })\n            }\n            handleMigrateStatsButton={() => {\n              setIsStatsModalOpen(false)\n              setIsMigrateStatsModalOpen(true)\n            }}\n            isHardMode={isHardMode}\n            isDarkMode={isDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            numberOfGuessesMade={guesses.length}\n          />\n          <DatePickerModal\n            isOpen={isDatePickerModalOpen}\n            initialDate={solutionGameDate}\n            handleSelectDate={(d) => {\n              setIsDatePickerModalOpen(false)\n              setGameDate(d)\n            }}\n            handleClose={() => setIsDatePickerModalOpen(false)}\n          />\n          <MigrateStatsModal\n            isOpen={isMigrateStatsModalOpen}\n            handleClose={() => setIsMigrateStatsModalOpen(false)}\n          />\n          <SettingsModal\n            isOpen={isSettingsModalOpen}\n            handleClose={() => setIsSettingsModalOpen(false)}\n            isHardMode={isHardMode}\n            handleHardMode={handleHardMode}\n            isDarkMode={isDarkMode}\n            handleDarkMode={handleDarkMode}\n            isHighContrastMode={isHighContrastMode}\n            handleHighContrastMode={handleHighContrastMode}\n          />\n          <AlertContainer />\n        </div>\n      </div>\n    </Div100vh>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}